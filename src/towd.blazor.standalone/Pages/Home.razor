@page "/"
@using towd.ui
@inject IJSRuntime JSRuntime

<PageTitle>TOWD</PageTitle>

@if (!GetContext().IsClosed)
{
	<h2>@prompt</h2>
	@foreach (var line in lines)
	{
		<p>
			@switch(line.Mood)
			{
				case towd.ui.Mood.Normal:
					<span>@line.Text</span>
					break;
				case towd.ui.Mood.ASCIIArt:
					<pre>@line.Text</pre>
					break;
			}
			@if (line.EndsLine)
			{
				<br />
			}
		</p>
	}
	<p>
		@{
			ResetChoiceIndex();
			int skipChoices = choicePage * 8 + (choicePage>0?1:0);
			if (choicePage > 0)
			{
				<button accesskey="@GetChoiceIndex()" @onclick="PreviousPage">[@GetChoiceIndex()] Previous Page</button><br/>
				NextChoiceIndex();
			}
			foreach (var choice in choices)
			{
				if (skipChoices > 0)
				{
					skipChoices--;
					continue;
				}
				if (GetChoiceIndex() < 9)
				{
					<button accesskey="@GetChoiceIndex()" @onclick="async () => await MakeChoiceAsync(choice)">[@GetChoiceIndex()] @choice</button><br/>
				}
				else
				{
					<button accesskey="@GetChoiceIndex()" @onclick="NextPage">[@GetChoiceIndex()] Next Page</button><br/>
					break;
				}
				NextChoiceIndex();
			}
		}

	</p>
}

@code {
	private int choiceIndex = 0;
	private int choicePage = 0;
	private void ResetChoiceIndex()
	{
		choiceIndex = 0;
	}
	private void NextChoiceIndex()
	{
		choiceIndex++;
	}
	private int GetChoiceIndex()
	{
		return choiceIndex;
	}
	private IEnumerable<UIDialogLine> lines = Enumerable.Empty<UIDialogLine>();
	private IEnumerable<string> choices = Enumerable.Empty<string>();
	private string prompt = string.Empty;

	private towd.ui.IUIContext<towd.business.IWorld>? _context = null;

	private towd.ui.IUIContext<towd.business.IWorld> GetContext()
	{
		if(_context==null)
		{
			_context = new towd.ui.UIContext(new Persister(JSRuntime));
		}

		return _context;
	}

	private async Task MakeChoiceAsync(string choice)
	{
		await GetContext().Choose(choice);

		await Reload();
	}

	protected override async Task OnInitializedAsync()
	{
		await Reload();
	}

	private async Task Reload()
	{
		await LoadLinesAsync();
		await LoadChoicesAsync();
		await LoadPromptAsync();
		choicePage = 0;
		System.Console.WriteLine("reloaded");
	}

	private async Task LoadPromptAsync()
	{
		prompt = await GetContext().GetPromptAsync();
	}

	private async Task LoadChoicesAsync()
	{
		choices = await GetContext().GetChoicesAsync();
	}

	private async Task LoadLinesAsync()
	{
		lines = await GetContext().GetLinesAsync();
	}
	private void PreviousPage()
	{
		choicePage--;
	}
	private void NextPage()
	{
		choicePage++;
	}
}
